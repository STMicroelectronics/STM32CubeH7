/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/Texts.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/TypedText.hpp>
#include <texts/TypedTextDatabase.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <touchgfx/TextProvider.hpp>

touchgfx::Font::StringWidthFunctionPointer touchgfx::Font::getStringWidthFunction = &touchgfx::Font::getStringWidthLTR;
touchgfx::LCD::DrawStringFunctionPointer touchgfx::LCD::drawStringFunction = &touchgfx::LCD::drawStringLTR;
touchgfx::TextProvider::UnicodeConverterInitFunctionPointer touchgfx::TextProvider::unicodeConverterInitFunction = static_cast<touchgfx::TextProvider::UnicodeConverterInitFunctionPointer>(0);
touchgfx::TextProvider::UnicodeConverterFunctionPointer touchgfx::TextProvider::unicodeConverterFunction = static_cast<touchgfx::TextProvider::UnicodeConverterFunctionPointer>(0);

//Default typed text database
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE =
{
    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x2, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0xc7, 0xfc, 0xe9, 0xe2, 0xe4, 0xe0, 0xe5, 0xe7, 0xea, 0xeb, 0xe8, 0xef, 0xee, 0xec, 0xc4, 0xc5, 0xc9, 0xe6, 0xc6, 0xf4, 0xf6, 0xf2, 0xfb, 0xf9, 0xff, 0xd6, 0xdc, 0xf8, 0xa3, 0xd8, 0xd7, 0x192, 0xe1, 0xed, 0xf3, 0xfa, 0xf1, 0xd1, 0xbf, 0xae, 0xbd, 0xbc, 0xa1, 0xc1, 0xc2, 0xc0, 0xa9, 0xa2, 0xa5, 0xe3, 0xc3, 0xa4, 0xf0, 0xd0, 0xca, 0xcb, 0xc8, 0x131, 0xcd, 0xce, 0xcf, 0xd3, 0xdf, 0xd4, 0xd2, 0xf5, 0xd5, 0xb5, 0xfe, 0xde, 0xda, 0xdb, 0xd9, 0xfd, 0xdd, 0xaf, 0xb4, 0xad, 0xb1, 0x2017, 0xbe, 0xb6, 0xa7, 0xf7, 0xb8, 0x0, // @0 " !"#$%&'()*+,-./0123456789:;<>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~?????????????????????????????????????????????????????????????????????????????????????"
    0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0xa, 0x53, 0x57, 0x2f, 0x48, 0x57, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x0, // @179 "Input from the potentiometer and adjustment of screen brightness?SW/HW Integration of external hardware components"
    0x50, 0x6c, 0x61, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0xa, 0x55, 0x73, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x54, 0x4d, 0x33, 0x32, 0x20, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x28, 0x53, 0x41, 0x49, 0x29, 0x0, // @294 "Play and browse your music files from external storage?Uses the STM32 serial audio interface (SAI)"
    0x50, 0x6c, 0x61, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0xa, 0x55, 0x73, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x2d, 0x6e, 0x65, 0x77, 0x20, 0x53, 0x54, 0x4d, 0x33, 0x32, 0x20, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x20, 0x4a, 0x50, 0x45, 0x47, 0x20, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x0, // @393 "Play and browse your movies from external storage?Uses the all-new STM32 hardware JPEG decoder"
    0x50, 0x6c, 0x61, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4b, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x20, 0x48, 0x69, 0x74, 0x20, 0x5a, 0x6f, 0x6d, 0x62, 0x69, 0x65, 0x20, 0x67, 0x61, 0x6d, 0x65, 0xa, 0x53, 0x68, 0x6f, 0x77, 0x73, 0x20, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x46, 0x58, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x53, 0x54, 0x4d, 0x33, 0x32, 0x20, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x2d, 0x41, 0x52, 0x54, 0x20, 0x0, // @488 "Play the Knight Hit Zombie game?Shows graphics performance of TouchGFX and STM32 Chrom-ART "
    0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0xa, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x54, 0x20, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x0, // @580 "Advanced light effect that shows the calculation ?capabilities of the ST Microcontroller"
    0x50, 0x6c, 0x61, 0x79, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x20, 0x67, 0x61, 0x6d, 0x65, 0xa, 0x53, 0x68, 0x6f, 0x77, 0x73, 0x20, 0x68, 0x69, 0x67, 0x68, 0x20, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x0, // @669 "Play a simple puzzle game?Shows high quality graphics and smooth animations"
    0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x61, 0x74, 0x65, 0x20, 0xa, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x54, 0x4d, 0x33, 0x32, 0x20, 0x72, 0x65, 0x61, 0x6c, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x28, 0x52, 0x54, 0x43, 0x29, 0x0, // @745 "Adjust time and date ?Integrates the STM32 real-time clock (RTC)"
    0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x68, 0x6f, 0x6d, 0x65, 0xa, 0x53, 0x68, 0x6f, 0x77, 0x73, 0x20, 0x76, 0x69, 0x76, 0x69, 0x64, 0x20, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x0, // @810 "Control your home?Shows vivid graphs and access control"
    0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x4a, 0x41, 0x4e, 0x46, 0x45, 0x42, 0x4d, 0x41, 0x52, 0x41, 0x50, 0x52, 0x4d, 0x41, 0x59, 0x4a, 0x55, 0x4e, 0x4a, 0x55, 0x4c, 0x41, 0x55, 0x47, 0x53, 0x45, 0x50, 0x4f, 0x43, 0x54, 0x4e, 0x4f, 0x56, 0x44, 0x45, 0x43, 0x0, // @866 "1234567890JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC"
    0x4b, 0x49, 0x4c, 0x4c, 0x20, 0x5a, 0x4f, 0x4d, 0x42, 0x49, 0x45, 0x53, 0xa, 0x41, 0x56, 0x4f, 0x49, 0x44, 0x20, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x53, 0x20, 0xa, 0x48, 0x41, 0x50, 0x50, 0x59, 0x20, 0x53, 0x4c, 0x41, 0x59, 0x49, 0x4e, 0x47, 0x21, 0x0, // @913 "KILL ZOMBIES?AVOID ARROWS ?HAPPY SLAYING!"
    0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x3a, 0x20, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x20, 0x77, 0x61, 0x73, 0x20, 0x74, 0x6f, 0x6f, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x21, 0x0, // @955 "Login failed: Pattern was too short!"
    0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x3a, 0x20, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x20, 0x77, 0x61, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x21, 0x0, // @992 "Login failed: Pattern was incorrect!"
    0x53, 0x54, 0x4d, 0x33, 0x32, 0x20, 0x4a, 0x50, 0x45, 0x47, 0x20, 0x44, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x52, 0x3a, 0x20, 0x2, 0x0, // @1029 "STM32 JPEG DECODER: <>"
    0x59, 0x4f, 0x55, 0x20, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x20, 0x2, 0x25, 0x0, // @1051 "YOU REACHED <>%"
    0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x58, 0x59, 0x5a, 0x0, // @1066 "ABCDEFGHIJKLMNOPQRSTUVXYZ"
    0x50, 0x4f, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x20, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x0, // @1092 "POTENTIOMETER LEVEL"
    0x54, 0x69, 0x6d, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x0, // @1112 "Time and Calendar"
    0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x0, // @1130 "External Hardware"
    0x4b, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x20, 0x48, 0x69, 0x74, 0x20, 0x5a, 0x6f, 0x6d, 0x62, 0x69, 0x65, 0x0, // @1148 "Knight Hit Zombie"
    0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x20, 0x42, 0x52, 0x49, 0x47, 0x48, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x0, // @1166 "SCREEN BRIGHTNESS"
    0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x20, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x0, // @1184 "SECURITY CONTROL"
    0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x21, 0x0, // @1201 "Login succeeded!"
    0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x3a, 0x20, 0x2, 0x0, // @1218 "FOLDER: <>"
    0x54, 0x49, 0x4d, 0x45, 0x20, 0x26, 0x20, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x0, // @1228 "TIME & CALENDAR"
    0x42, 0x4c, 0x49, 0x4e, 0x44, 0x53, 0x20, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x0, // @1244 "BLINDS CONTROL"
    0x48, 0x45, 0x52, 0x45, 0x27, 0x53, 0x20, 0x41, 0x20, 0x48, 0x49, 0x4e, 0x54, 0x21, 0x0, // @1259 "HERE'S A HINT!"
    0x2b, 0x2, 0x0, // @1274 "+<>"
    0x59, 0x4f, 0x55, 0x52, 0x20, 0x50, 0x4c, 0x41, 0x59, 0x4c, 0x49, 0x53, 0x54, 0x0, // @1277 "YOUR PLAYLIST"
    0x4c, 0x49, 0x47, 0x48, 0x54, 0x20, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x0, // @1291 "LIGHT CONTROL"
    0x48, 0x4f, 0x4d, 0x45, 0x20, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x0, // @1305 "HOME CONTROL"
    0x41, 0x75, 0x64, 0x69, 0x6f, 0x20, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x0, // @1318 "Audio Player"
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x2d, 0x2b, 0x0, // @1331 "0123456789-+"
    0x2e, 0x2d, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x0, // @1344 ".-0123456789"
    0x48, 0x6f, 0x6d, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x0, // @1357 "Home Control"
    0x56, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x0, // @1370 "Video Player"
    0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45, 0x20, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x0, // @1383 "CHOOSE CLOCK"
    0x4c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x0, // @1396 "Light Effect"
    0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x20, 0x3a, 0x0, // @1409 "1234567890 :"
    0x46, 0x50, 0x53, 0x20, 0x2f, 0x20, 0x4d, 0x43, 0x55, 0x3a, 0x20, 0x0, // @1422 "FPS / MCU: "
    0x32, 0x30, 0x34, 0x38, 0x20, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x0, // @1434 "2048 Puzzle"
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x0, // @1446 "0123456789:"
    0x4d, 0x43, 0x55, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x3a, 0x20, 0x0, // @1458 "MCU load: "
    0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x0, // @1469 "1234567890"
    0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x0, // @1480 "STATISTICS"
    0x2, 0x20, 0x46, 0x50, 0x53, 0x0, // @1491 "<> FPS"
    0x59, 0x4f, 0x55, 0x20, 0x44, 0x49, 0x45, 0x44, 0x21, 0x0, // @1497 "YOU DIED!"
    0x2, 0x20, 0x25, 0x0, // @1507 "<> %"
    0x45, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x52, 0x0, // @1511 "EQUALIZER"
    0x4d, 0x43, 0x55, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x0, // @1521 "MCU load"
    0x59, 0x4f, 0x55, 0x20, 0x57, 0x4f, 0x4e, 0x21, 0x0, // @1530 "YOU WON!"
    0x53, 0x45, 0x54, 0x20, 0x44, 0x41, 0x54, 0x45, 0x0, // @1539 "SET DATE"
    0x53, 0x45, 0x54, 0x20, 0x54, 0x49, 0x4d, 0x45, 0x0, // @1548 "SET TIME"
    0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x0, // @1557 "LOGIN"
    0x2f, 0x0 // @1563 "/"
};
extern uint32_t const indicesGbr[];

//array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

//Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] =
{
    indicesGbr
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}

