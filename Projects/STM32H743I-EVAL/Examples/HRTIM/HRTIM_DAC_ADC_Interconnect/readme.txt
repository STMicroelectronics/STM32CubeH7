/**
  @page HRTIM_DAC_ADC_Interconnect HRTIM DAC ADC Interconnect example
  
  @verbatim
  ********************* COPYRIGHT(c) 2017 STMicroelectronics *******************
  * @file    HRTIM/HRTIM_DAC_ADC_Interconnect/readme.txt 
  * @author  MCD Application Team
  * @brief   Description of the HRTIM interconnect feature with DAC and ADC
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2017 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  @endverbatim

@par Example Description 

This example shows how to use the interconnection feature between HRTIM, DAC and ADC.

At the beginning of the main program the HAL_Init() function is called to reset 
all the peripherals, initialize the Flash interface and the systick.
The SystemClock_Config() function is used to configure the system clock for STM32H743xx Devices :
The CPU at 400MHz 
The HCLK for D1 Domain AXI and AHB3 peripherals, D2 Domain AHB1/AHB2 peripherals 
and D3 Domain AHB4  peripherals at 200MHz.
The APB clock dividers for D1 Domain APB3 peripherals, D2 Domain APB1 and APB2 peripherals 
and D3 Domain APB4 peripherals to  run at 100MHz

First the HRTIM Master Timer is used to trigger the two peripherals: DAC and ADC.
DACTRGOUT1 is used to trigger the DAC1 and ADCTRIG1 is used as external trigger 
to start the regular conversion of ADC2.
Then the DAC is configured to generate a triangular waveform on its output pin (PA.04) and
on its internalchip input which is internally connected to the ADC2_CHANNEL_16.
After that, The ADC will convert the signal generated by the DAC1_CH1 synchronously 
with the HRTIM trigger. 
At each ADC end of conversion callback, we update the Pulse of the HRTIM1_TIMA timer
with the value of the ADC converted voltage (that correspond also to the DAC1 CH1 output voltage).
DAC1 and ADC1 resolution are programmed to 12 bit resolution and the Max period for TIMA also 
is fixed to 0xFFF to avoid any adjustement of data.
Finally, we have the different value, forming the triangular waveform, generated by the DAC
and then converted by the ADC, are programmed on the Pulse of the TIMA timer.

The TIMA waveform and the DAC1 CH1 waveform can be displayed using an oscilloscope.

@note Care must be taken when using HAL_Delay(), this function provides accurate delay (in milliseconds)
      based on variable incremented in SysTick ISR. This implies that if HAL_Delay() is called from
      a peripheral ISR process, then the SysTick interrupt must have higher priority (numerically lower)
      than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
      To change the SysTick interrupt priority you have to use HAL_NVIC_SetPriority() function.
      
@note The example need to ensure that the SysTick time base is always set to 1 millisecond
      to have correct HAL operation.

@Note If the  application is using the DTCM/ITCM memories (@0x20000000/ 0x0000000: not cacheable and only accessible
      by the Cortex M7 and the  MDMA), no need for cache maintenance when the Cortex M7 and the MDMA access these RAMs.
      If the application needs to use DMA(or other masters) based access or requires more RAM, then  the user has to:
              - Use a non TCM SRAM. (example : D1 AXI-SRAM @ 0x24000000)
              - Add a cache maintenance mechanism to ensure the cache coherence between CPU and other masters(DMAs,DMA2D,LTDC,MDMA).
              - The addresses and the size of cacheable buffers (shared between CPU and other masters)
                must be	properly defined to be aligned to L1-CACHE line size (32 bytes). 
 
@Note It is recommended to enable the cache and maintain its coherence.
      Depending on the use case it is also possible to configure the cache attributes using the MPU.
      Please refer to the AN4838 "Managing memory protection unit (MPU) in STM32 MCUs"
      Please refer to the AN4839 "Level 1 cache on STM32F7 Series"

@par Keywords

HRTIM, Timer, ADC, DAC, Interconnection, Timer-triggered, Synchronous, Waveforms, Triangular, Oscilloscope

@par Directory contents 

  - HRTIM/HRTIM_DAC_ADC_Interconnect/Inc/stm32h7xx_hal_conf.h    HAL configuration file
  - HRTIM/HRTIM_DAC_ADC_Interconnect/Inc/stm32h7xx_it.h          Interrupt handlers header file
  - HRTIM/HRTIM_DAC_ADC_Interconnect/Inc/main.h                  Header for main.c module  
  - HRTIM/HRTIM_DAC_ADC_Interconnect/Src/stm32h7xx_it.c          Interrupt handlers
  - HRTIM/HRTIM_DAC_ADC_Interconnect/Src/main.c                  Main program
  - HRTIM/HRTIM_DAC_ADC_Interconnect/Src/stm32h7xx_hal_msp.c     HAL MSP file
  - HRTIM/HRTIM_DAC_ADC_Interconnect/Src/system_stm32h7xx.c      STM32H7xx system source file


@par Hardware and Software environment

  - This example runs on STM32H743xx devices.
    
  - This example has been tested with STMicroelectronics STM32H743I-EVAL 
    board and can be easily tailored to any other supported device 
    and development board.      

  - STM32H743I-EVAL Set-up
   Connect the following pins to an oscilloscope to monitor the different waveforms:
        - DAC1_CH1 :        PA.04 (pin19  CN6)
        - HRTIM1_TIMA_TA1 : PC.06 (pin45 CN7)
@note LED3 is ON during test because it is connected to PA4 (DAC channel1).

@par How to use it ? 

In order to make the program work, you must do the following :
 - Open your preferred toolchain
 - Rebuild all files and load your image into target memory
 - Run the example


 */
