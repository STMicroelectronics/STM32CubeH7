/**
  @page TIM_6Steps Timers Synchronization example
  
  @verbatim
  ******************** (C) COPYRIGHT 2017 STMicroelectronics *******************
  * @file    TIM/TIM_6Steps/readme.txt 
  * @author  MCD Application Team
  * @brief   Description of the TIM 6 Steps example.

  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2017 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  @endverbatim

@par Example Description 

This example shows how to configure the TIM1 peripheral to generate 6 Steps.

At the beginning of the main program the HAL_Init() function is called to reset 
all the peripherals, initialize the Flash interface and the systick.
The SystemClock_Config() function is used to configure the system clock for STM32H743xx Devices :
The CPU at 400MHz 
The HCLK for D1 Domain AXI and AHB3 peripherals, D2 Domain AHB1/AHB2 peripherals 
and D3 Domain AHB4  peripherals at 200MHz.
The APB clock dividers for D1 Domain APB3 peripherals, D2 Domain APB1 and APB2 peripherals 
and D3 Domain APB4 peripherals to  run at 100MHz

The STM32H743xx TIM1 peripheral offers the possibility to program in advance the 
configuration for the next TIM1 outputs behaviour (step) and change the configuration
of all the channels at the same time. This operation is possible when the COM 
(commutation) event is used.

The COM event can be generated by software by setting the COM bit in the TIM1_EGR
register or by hardware (on TRC rising edge).
In this example, a software COM event is generated each 1 ms: using the SysTick 
interrupt.

The TIM1 is configured in Timing Mode, each time a COM event occurs, a new TIM1
configuration will be set in advance. Only changed states are programmed. 

The break Polarity is used at High level.
LED3 is ON when there are an error.
The following Table describes the TIM1 Channels states:

@verbatim
                     -----------------------------------------------
                    | Step1 | Step2 | Step3 | Step4 | Step5 | Step6 |
          ----------------------------------------------------------
         |Channel1  | 1(PWM)|   0   |   0   |   0   |   0   |1(PWM) |
          ----------------------------------------------------------
         |Channel1N |   0   |   0   |1(PWM) |1(PWM) |   0   |   0   |
          ----------------------------------------------------------
         |Channel2  |   0   |   0   |   0   |1(PWM) |1(PWM) |   0   |
          ----------------------------------------------------------
         |Channel2N |1(PWM) |1(PWM) |   0   |   0   |   0   |   0   |
          ----------------------------------------------------------
         |Channel3  |   0   |1(PWM) |1(PWM) |   0   |   0   |   0   |
          ----------------------------------------------------------
         |Channel3N |   0   |   0   |   0   |   0   |1(PWM) |1(PWM) |
          -----------------------------------------------------------
   
   
 Channel1  (PA.08)   |||||||_________________________________||||||||||||||_________________________________|||||||
 Channel1N (PB.13)   _______________||||||||||||||||_______________________________||||||||||||||||________________
                                                    
 Channel2  (PE.11)   _______________________||||||||||||||||_______________________________||||||||||||||||________
 Channel2N (PB.14)   |||||||||||||||________________________________|||||||||||||||________________________________
                                                    
 Channel3  (PE.13)   _______||||||||||||||||_______________________________||||||||||||||||________________________
 Channel3N (PE.12)   ________________________________|||||||||||||||________________________________|||||||||||||||
   
@endverbatim


@Note If the  application is using the DTCM/ITCM memories (@0x20000000/ 0x0000000: not cacheable and only accessible
      by the Cortex M7 and the  MDMA), no need for cache maintenance when the Cortex M7 and the MDMA access these RAMs.
      If the application needs to use DMA(or other masters) based access or requires more RAM, then  the user has to:
              - Use a non TCM SRAM. (example : D1 AXI-SRAM @ 0x24000000)
              - Add a cache maintenance mechanism to ensure the cache coherence between CPU and other masters(DMAs,DMA2D,LTDC,MDMA).
              - The addresses and the size of cacheable buffers (shared between CPU and other masters)
                must be	properly defined to be aligned to L1-CACHE line size (32 bytes). 
 
@Note It is recommended to enable the cache and maintain its coherence.
      Depending on the use case it is also possible to configure the cache attributes using the MPU.
      Please refer to the AN4838 "Managing memory protection unit (MPU) in STM32 MCUs"
      Please refer to the AN4839 "Level 1 cache on STM32F7 Series"

@par Keywords

Timers, 6 steps, PWM, Duty Cycle, Waveform, Oscilloscope, Output, Signal, commutation, timing mode

@par Directory contents 

  - TIM/TIM_6Steps/Inc/stm32h7xx_hal_conf.h    HAL configuration file
  - TIM/TIM_6Steps/Inc/stm32h7xx_it.h          Interrupt handlers header file
  - TIM/TIM_6Steps/Inc/main.h                  Header for main.c module  
  - TIM/TIM_6Steps/Src/stm32h7xx_it.c          Interrupt handlers
  - TIM/TIM_6Steps/Src/main.c                  Main program
  - TIM/TIM_6Steps/Src/stm32h7xx_hal_msp.c     HAL MSP file
  - TIM/TIM_6Steps/Src/system_stm32h7xx.c      STM32H7xx system source file

@par Hardware and Software environment

  - This example runs on STM32H743xx devices.
    
  - This example has been tested with STM32H743I-EVAL board and can be
    easily tailored to any other supported device and development board.      

  - STM32H743I-EVAL Set-up
   Connect the following pins to an oscilloscope to monitor the different waveforms:
      - TIM1_CH1  pin (PA.08)(CN7  pin 52)  
      - TIM1_CH1N pin (PB.13)(CN6  pin 44)  
      - TIM1_CH2  pin (PE.11)(CN11 pin 16)   
      - TIM1_CH2N pin (PB.14)(CN6  pin 45)  
      - TIM1_CH3  pin (PE.13)(CN11 pin 19)  
      - TIM1_CH3N pin (PE.12)(CN11 pin 15) 

    - Connect the TIM1 break pin TIM1_BKIN pin (PB.12 CN6 pin 46) to the GND. To generate a 
      break event, switch this pin level from 0V to 3.3V.  


@par How to use it ? 

In order to make the program work, you must do the following :
 - Open your preferred tool chain 
 - Rebuild all files and load your image into target memory
 - Run the example 
 


 */
