/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef TRACKSELECTORBASE_HPP
#define TRACKSELECTORBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/scrollers/ScrollList.hpp>
#include <gui/containers/track.hpp>

#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/widgets/TextArea.hpp>
class trackSelectorBase : public touchgfx::Container
{
public:
    trackSelectorBase();
    virtual ~trackSelectorBase() {}
    virtual void initialize();

    /*
     * Custom Trigger Callback Setters
     */
    void setShuffelPressedCallback(touchgfx::GenericCallback<bool>& callback)
    {
        this->shuffelPressedCallback = &callback;
    }
    void setRepeatPressedCallback(touchgfx::GenericCallback<bool>& callback)
    {
        this->repeatPressedCallback = &callback;
    }
    void setTrackPlayPausedPressedCallback(touchgfx::GenericCallback<bool>& callback)
    {
        this->trackPlayPausedPressedCallback = &callback;
    }

    virtual void trackListUpdateItem(track& item, int16_t itemIndex)
    {
        // Override and implement this function in trackSelector
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitShuffelPressedCallback(bool value)
    {
        if (shuffelPressedCallback && shuffelPressedCallback->isValid())
        {
            this->shuffelPressedCallback->execute(value);
        }
    }
    virtual void emitRepeatPressedCallback(bool value)
    {
        if (repeatPressedCallback && repeatPressedCallback->isValid())
        {
            this->repeatPressedCallback->execute(value);
        }
    }
    virtual void emitTrackPlayPausedPressedCallback(bool value)
    {
        if (trackPlayPausedPressedCallback && trackPlayPausedPressedCallback->isValid())
        {
            this->trackPlayPausedPressedCallback->execute(value);
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::Image albumBG;
    touchgfx::ScrollList trackList;
    touchgfx::DrawableListItems<track, 7> trackListListItems;

    touchgfx::Image gradientTop;
    touchgfx::Image gradientButtom;
    touchgfx::ToggleButton shuffelButton;
    touchgfx::ToggleButton repeatButton;
    touchgfx::TextArea Album;

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<trackSelectorBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<trackSelectorBase, touchgfx::DrawableListItemsInterface*, int16_t, int16_t> updateItemCallback;

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<bool>* shuffelPressedCallback;
    touchgfx::GenericCallback<bool>* repeatPressedCallback;
    touchgfx::GenericCallback<bool>* trackPlayPausedPressedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex);

};

#endif // TRACKSELECTORBASE_HPP
