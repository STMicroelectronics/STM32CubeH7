/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef AUDIO_PLAYERVIEWBASE_HPP
#define AUDIO_PLAYERVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/audio_player_screen/audio_playerPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

#include <touchgfx/widgets/AnimatedImage.hpp>
#include <gui/containers/trackSelector.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/MoveAnimator.hpp>
class audio_playerViewBase : public touchgfx::View<audio_playerPresenter>
{
public:
    audio_playerViewBase();
    virtual ~audio_playerViewBase() {}
    virtual void setupScreen();

    /*
     * Custom Actions
     */
    virtual void volumeButtonPressed(bool value);
    virtual void volumeSliderChanged(uint16_t value);
    virtual void musicSliderChanged(uint16_t value);
    virtual void playPauseButtonPressed(bool value);

    /*
     * Virtual Action Handlers
     */
    virtual void albumButtonPressed()
    {
        // Override and implement this function in audio_player
    }

    virtual void trackListPlayPausePressed(bool value)
    {
        // Override and implement this function in audio_player
    }

    virtual void nextSongPressed()
    {
        // Override and implement this function in audio_player
    }

    virtual void previousSongPressed()
    {
        // Override and implement this function in audio_player
    }

    virtual void shufflePressed(bool value)
    {
        // Override and implement this function in audio_player
    }

    virtual void repeatPressed(bool value)
    {
        // Override and implement this function in audio_player
    }

    virtual void cancalPowerSavePressed()
    {
        // Override and implement this function in audio_player
    }

    virtual void powerSavePressed()
    {
        // Override and implement this function in audio_player
    }

    virtual void backButtonPressed()
    {
        // Override and implement this function in audio_player
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box backgroundBox;
    touchgfx::TextArea noMediaFilesText;
    touchgfx::Image background;
    touchgfx::Container bottomBar;
    touchgfx::Image bottombar;
    touchgfx::Slider musicDurationSlider;
    touchgfx::ToggleButton volumeButton;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger > powerSaveButton;
    touchgfx::ToggleButton playPauseButton;
    touchgfx::Button nextSongButton;
    touchgfx::Button previousSongButton;
    touchgfx::TextAreaWithOneWildcard durationLeft;
    touchgfx::TextAreaWithOneWildcard durationTotal;

    touchgfx::MoveAnimator< touchgfx::Container > volumeBarContainer;
    touchgfx::Image volumenSliderBG;
    touchgfx::Slider volumeSlider;

    touchgfx::Image onLed;
    touchgfx::AnimatedImage playPauseAnimation;
    touchgfx::MoveAnimator< trackSelector > trackSelectorBox;
    touchgfx::Button backButton;
    touchgfx::Button albumButton;
    touchgfx::Button cancelButton;
    touchgfx::Container powerSaveContainer;
    touchgfx::Box powerSaveBackground;
    touchgfx::Image powersaveInconAndText;
    touchgfx::TextArea offText;
    touchgfx::TextAreaWithTwoWildcards shuttingOfCounter;
    touchgfx::Button cancelPowerSave;
    touchgfx::TextArea offText_1;


    /*
     * Wildcard Buffers
     */
    static const uint16_t DURATIONLEFT_SIZE = 6;
    touchgfx::Unicode::UnicodeChar durationLeftBuffer[DURATIONLEFT_SIZE];
    static const uint16_t DURATIONTOTAL_SIZE = 6;
    touchgfx::Unicode::UnicodeChar durationTotalBuffer[DURATIONTOTAL_SIZE];
    static const uint16_t SHUTTINGOFCOUNTERBUFFER1_SIZE = 2;
    touchgfx::Unicode::UnicodeChar shuttingOfCounterBuffer1[SHUTTINGOFCOUNTERBUFFER1_SIZE];
    static const uint16_t SHUTTINGOFCOUNTERBUFFER2_SIZE = 8;
    touchgfx::Unicode::UnicodeChar shuttingOfCounterBuffer2[SHUTTINGOFCOUNTERBUFFER2_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<audio_playerViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<audio_playerViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;
    touchgfx::Callback<audio_playerViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;
    touchgfx::Callback<audio_playerViewBase, const touchgfx::Slider&, int> sliderValueConfirmedCallback;
    touchgfx::Callback<audio_playerViewBase, bool> trackSelectorBoxTrackPlayPausedPressedCallback;
    touchgfx::Callback<audio_playerViewBase, bool> trackSelectorBoxShuffelPressedCallback;
    touchgfx::Callback<audio_playerViewBase, bool> trackSelectorBoxRepeatPressedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);
    void sliderValueConfirmedCallbackHandler(const touchgfx::Slider& src, int value);
    void trackSelectorBoxTrackPlayPausedPressedCallbackHandler(bool value);
    void trackSelectorBoxShuffelPressedCallbackHandler(bool value);
    void trackSelectorBoxRepeatPressedCallbackHandler(bool value);

};

#endif // AUDIO_PLAYERVIEWBASE_HPP
