/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/cloudandweather_screen/CloudAndWeatherViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"

CloudAndWeatherViewBase::CloudAndWeatherViewBase() :
    flexButtonCallback(this, &CloudAndWeatherViewBase::flexButtonCallbackHandler),
    settingsMenuClockModeButtonClickedCallback(this, &CloudAndWeatherViewBase::settingsMenuClockModeButtonClickedCallbackHandler),
    settingsMenuBackButonClickedCallback(this, &CloudAndWeatherViewBase::settingsMenuBackButonClickedCallbackHandler),
    settingsMenuChangeCityCallback(this, &CloudAndWeatherViewBase::settingsMenuChangeCityCallbackHandler),
    settingsMenuTemperatureUnitButtonClickedCallback(this, &CloudAndWeatherViewBase::settingsMenuTemperatureUnitButtonClickedCallbackHandler),
    settingsMenuWifiMenuSelectedCallback(this, &CloudAndWeatherViewBase::settingsMenuWifiMenuSelectedCallbackHandler),
    wifiConnectingWifiRetryPressedCallback(this, &CloudAndWeatherViewBase::wifiConnectingWifiRetryPressedCallbackHandler)
{
    backgroundBox.setPosition(0, 0, 800, 480);
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(56, 91, 116));

    gradientBackground.setBitmap(touchgfx::Bitmap(BITMAP_SUNRISE_ID));
    gradientBackground.setPosition(0, 0, 800, 480);
    gradientBackground.setOffset(0, 0);

    gradientBackground2.setBitmap(touchgfx::Bitmap(BITMAP_SUNRISE_ID));
    gradientBackground2.setPosition(0, 0, 800, 480);
    gradientBackground2.setVisible(false);
    gradientBackground2.setOffset(0, 0);

    rightForecast.setPosition(0, 0, 800, 480);

    forecast3.setXY(0, 0);
    rightForecast.add(forecast3);

    centerForecast.setPosition(0, 0, 800, 480);

    forecast2.setXY(0, 0);
    centerForecast.add(forecast2);

    leftForecast.setPosition(0, 0, 800, 480);

    forecast1.setXY(0, 0);
    leftForecast.add(forecast1);

    settingsMenu.setXY(0, 0);
    settingsMenu.setVisible(false);
    settingsMenu.setClockModeButtonClickedCallback(settingsMenuClockModeButtonClickedCallback);
    settingsMenu.setBackButonClickedCallback(settingsMenuBackButonClickedCallback);
    settingsMenu.setChangeCityCallback(settingsMenuChangeCityCallback);
    settingsMenu.setTemperatureUnitButtonClickedCallback(settingsMenuTemperatureUnitButtonClickedCallback);
    settingsMenu.setWifiMenuSelectedCallback(settingsMenuWifiMenuSelectedCallback);

    wifiMenu.setXY(0, 0);
    wifiMenu.setVisible(false);

    wifiConnecting.setXY(0, 0);
    wifiConnecting.setVisible(false);
    wifiConnecting.setWifiRetryPressedCallback(wifiConnectingWifiRetryPressedCallback);
    wifiConnecting.setWifiRetryPressedCallback(wifiConnectingWifiRetryPressedCallback);

    settingsButton.setIconBitmaps(Bitmap(BITMAP_SETTINGS_ID), Bitmap(BITMAP_SETTINGS_ID));
    settingsButton.setIconXY(45, 20);
    settingsButton.setPosition(715, 0, 85, 80);
    settingsButton.setAction(flexButtonCallback);

    closeButton.setIconBitmaps(Bitmap(BITMAP_CLOSE_ID), Bitmap(BITMAP_CLOSE_ID));
    closeButton.setIconXY(18, 18);
    closeButton.setPosition(0, 0, 85, 80);
    closeButton.setAction(flexButtonCallback);

    wifiIcon.setXY(388, 20);
    wifiIcon.setBitmap(touchgfx::Bitmap(BITMAP_NO_WIFI_ID));

    add(backgroundBox);
    add(gradientBackground);
    add(gradientBackground2);
    add(rightForecast);
    add(centerForecast);
    add(leftForecast);
    add(settingsMenu);
    add(wifiMenu);
    add(wifiConnecting);
    add(settingsButton);
    add(closeButton);
    add(wifiIcon);
}

void CloudAndWeatherViewBase::setupScreen()
{
    forecast3.initialize();
    forecast2.initialize();
    forecast1.initialize();
    settingsMenu.initialize();
    wifiMenu.initialize();
    wifiConnecting.initialize();
}

void CloudAndWeatherViewBase::settingsMenuClockModeButtonClickedCallbackHandler(bool value)
{
    //settingsClockFormatEmitted
    //When settingsMenu clockModeButtonClicked call virtual function
    //Call updateClockFormat
    updateClockFormat(value);
}

void CloudAndWeatherViewBase::settingsMenuBackButonClickedCallbackHandler()
{
    //hideSettingsContainer
    //When settingsMenu backButonClicked hide settingsMenu
    //Hide settingsMenu
    settingsMenu.setVisible(false);
    settingsMenu.invalidate();
}

void CloudAndWeatherViewBase::settingsMenuChangeCityCallbackHandler()
{
    //Interaction6
    //When settingsMenu changeCity call virtual function
    //Call changeCity
    changeCity();
}

void CloudAndWeatherViewBase::settingsMenuTemperatureUnitButtonClickedCallbackHandler(bool value)
{
    //settingsChangeTemperatureUnitEmitted
    //When settingsMenu temperatureUnitButtonClicked call virtual function
    //Call updateTemperatureUnit
    updateTemperatureUnit(value);
}

void CloudAndWeatherViewBase::settingsMenuWifiMenuSelectedCallbackHandler()
{
    //settingsWifiMenuSelected_1
    //When settingsMenu wifiMenuSelected hide settingsMenu
    //Hide settingsMenu
    settingsMenu.setVisible(false);
    settingsMenu.invalidate();

    //settingsWifiMenuSelected_2
    //When settingsWifiMenuSelected_1 completed show wifiMenu
    //Show wifiMenu
    wifiMenu.setVisible(true);
    wifiMenu.invalidate();
}

void CloudAndWeatherViewBase::wifiConnectingWifiRetryPressedCallbackHandler()
{
    //wifiRetryPressed
    //When wifiConnecting wifiRetryPressed call virtual function
    //Call wifiRetryButtonPressed
    wifiRetryButtonPressed();

    //wifiRetryPressed2
    //When wifiConnecting wifiRetryPressed hide wifiConnecting
    //Hide wifiConnecting
    wifiConnecting.setVisible(false);
    wifiConnecting.invalidate();
}

void CloudAndWeatherViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &settingsButton)
    {
        //openSettings_1
        //When settingsButton clicked call virtual function
        //Call settingsPressed
        settingsPressed();

        //openSettings_2
        //When openSettings_1 completed show settingsMenu
        //Show settingsMenu
        settingsMenu.setVisible(true);
        settingsMenu.invalidate();
    }
    else if (&src == &closeButton)
    {
        //closeButtonPressed
        //When closeButton clicked call virtual function
        //Call closeButtonPressed
        closeButtonPressed();
    }
}
