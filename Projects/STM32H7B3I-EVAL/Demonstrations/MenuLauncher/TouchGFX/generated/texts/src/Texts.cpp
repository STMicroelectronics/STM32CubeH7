/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/Texts.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/TypedText.hpp>
#include <texts/TypedTextDatabase.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <touchgfx/TextProvider.hpp>

touchgfx::Font::StringWidthFunctionPointer touchgfx::Font::getStringWidthFunction = &touchgfx::Font::getStringWidthLTR;
touchgfx::LCD::DrawStringFunctionPointer touchgfx::LCD::drawStringFunction = &touchgfx::LCD::drawStringLTR;
touchgfx::TextProvider::UnicodeConverterInitFunctionPointer touchgfx::TextProvider::unicodeConverterInitFunction = static_cast<touchgfx::TextProvider::UnicodeConverterInitFunctionPointer>(0);
touchgfx::TextProvider::UnicodeConverterFunctionPointer touchgfx::TextProvider::unicodeConverterFunction = static_cast<touchgfx::TextProvider::UnicodeConverterFunctionPointer>(0);

//Default typed text database
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE =
{
    0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x20, 0x57, 0x69, 0x7a, 0x61, 0x72, 0x64, 0x20, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x47, 0x55, 0x49, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0xa, 0x6f, 0x6e, 0x20, 0x53, 0x54, 0x4d, 0x33, 0x32, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6c, 0x65, 0x74, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x20, 0xa, 0x47, 0x55, 0x49, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0xa, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x73, 0x74, 0x20, 0x52, 0x41, 0x4d, 0x20, 0x61, 0x73, 0x20, 0x77, 0x65, 0x6c, 0x6c, 0x20, 0x61, 0x73, 0x20, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x66, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0xa, 0x64, 0x65, 0x6d, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x47, 0x55, 0x49, 0x73, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x20, 0xa, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x20, 0x63, 0x61, 0x73, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x20, 0x57, 0x69, 0x7a, 0x61, 0x72, 0x64, 0x27, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x0, // @0 "Embedded Wizard simplifies your GUI development ?on STM32 and lets you create high-performance ?GUIs with minimal effort while achieving the ?smallest RAM as well as flash footprint. This ?demo provides several GUIs showing the variety ?of use cases and Embedded Wizard's possibilities."
    0x54, 0x61, 0x6b, 0x65, 0x20, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x72, 0x65, 0x65, 0x20, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x46, 0x58, 0x20, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0xa, 0x66, 0x6f, 0x72, 0x20, 0x53, 0x54, 0x4d, 0x33, 0x32, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x68, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x54, 0x4d, 0x33, 0x32, 0x20, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x20, 0xa, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x55, 0x49, 0x2019, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0xa, 0x68, 0x6f, 0x6d, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x68, 0x6f, 0x6f, 0x64, 0x2c, 0x20, 0xa, 0x61, 0x6e, 0x20, 0x6f, 0x76, 0x65, 0x6e, 0x2c, 0x20, 0x61, 0x20, 0x77, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2c, 0x20, 0x61, 0x20, 0x62, 0x61, 0x74, 0x68, 0x74, 0x75, 0x62, 0x2c, 0xa, 0x61, 0x20, 0x68, 0x6f, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x20, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x20, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x2e, 0x0, // @287 "Take advantage of the free TouchGFX framework ?for STM32, and experience how the STM32 graphics ?offer can be used to create UI?s for multiple types of ?home appliances such as, an extractor hood, ?an oven, a washing machine, a bathtub,?a home controller and a smart recipe."
    0x54, 0x68, 0x65, 0x20, 0x53, 0x54, 0x65, 0x6d, 0x57, 0x69, 0x6e, 0x20, 0x44, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x20, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0xa, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x20, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x20, 0x65, 0x6d, 0x57, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x46, 0x72, 0x65, 0x65, 0x52, 0x54, 0x4f, 0x53, 0x20, 0xa, 0x72, 0x65, 0x61, 0x6c, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x75, 0x73, 0x65, 0x73, 0x20, 0x61, 0x6c, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0xa, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x20, 0x53, 0x54, 0x4d, 0x33, 0x32, 0x20, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x20, 0x61, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0xa, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x54, 0x4d, 0x33, 0x32, 0x43, 0x75, 0x62, 0x65, 0x20, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0xa, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x20, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x0, // @562 "The STemWin Demonstration is built around the ?legacy graphical library emWin and the FreeRTOS ?real time operating system and uses almost the ?whole STM32 capabilities to offer a large scope ?of usage based on the STM32Cube Drivers and ?several middleware  components."
    0x54, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x26, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x61, 0x20, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0xa, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x54, 0x4d, 0x33, 0x32, 0x48, 0x37, 0x20, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0xa, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x46, 0x58, 0x20, 0x41, 0x50, 0x49, 0x73, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0xa, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x20, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x0, // @832 "The clock&weather module provides a Clock and ?weather application based on the STM32H7 Series ?and the TouchGFX APIs. It allows to retrieve the ?time and weather forecast for chosen cities."
    0x54, 0x68, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20, 0xa, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x20, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x54, 0x4d, 0x33, 0x32, 0x48, 0x37, 0x20, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0xa, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x46, 0x58, 0x20, 0x41, 0x50, 0x49, 0x73, 0x2e, 0x20, 0xa, 0x49, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x20, 0x69, 0x6e, 0x20, 0x57, 0x41, 0x56, 0x20, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x4d, 0x50, 0x33, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x2e, 0xa, 0x0, // @1023 "The audio player module provides a complete ?audio solution based on the STM32H7 Series ?and the TouchGFX APIs. ?It supports playing music in WAV  and MP3 formats.?"
    0x54, 0x68, 0x65, 0x20, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x61, 0x20, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0xa, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x54, 0x4d, 0x33, 0x32, 0x48, 0x37, 0x20, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x46, 0x58, 0x20, 0xa, 0x41, 0x50, 0x49, 0x73, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x41, 0x56, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x0, // @1188 "The video player module provides a video solution ?based on the STM32H7 Series and the TouchGFX ?APIs. It supports the playing movie in AVI format."
    0x42, 0x6f, 0x61, 0x72, 0x64, 0x3a, 0x20, 0x53, 0x54, 0x4d, 0x33, 0x32, 0x48, 0x37, 0x42, 0x33, 0x49, 0x2d, 0x45, 0x56, 0x41, 0x4c, 0xa, 0x4d, 0x43, 0x55, 0x3a, 0x20, 0x53, 0x54, 0x4d, 0x33, 0x32, 0x48, 0x37, 0xa, 0x43, 0x50, 0x55, 0x20, 0x53, 0x70, 0x65, 0x65, 0x64, 0x3a, 0x20, 0x32, 0x38, 0x30, 0x20, 0x4d, 0x68, 0x7a, 0xa, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x2, 0x0, // @1336 "Board: STM32H7B3I-EVAL?MCU: STM32H7?CPU Speed: 280 Mhz?Firmware version: <>"
    0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x20, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x0, // @1411 "SYSTEM INFORMATION"
    0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x0, // @1430 "CLOCK AND WEATHER"
    0x45, 0x4d, 0x42, 0x45, 0x44, 0x44, 0x45, 0x44, 0x20, 0x57, 0x49, 0x5a, 0x41, 0x52, 0x44, 0x0, // @1448 "EMBEDDED WIZARD"
    0x41, 0x55, 0x44, 0x49, 0x4f, 0x20, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x0, // @1464 "AUDIO PLAYER"
    0x56, 0x49, 0x44, 0x45, 0x4f, 0x20, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x0, // @1477 "VIDEO PLAYER"
    0x54, 0x4f, 0x55, 0x43, 0x48, 0x47, 0x46, 0x58, 0x0, // @1490 "TOUCHGFX"
    0x53, 0x54, 0x45, 0x4d, 0x57, 0x49, 0x4e, 0x0, // @1499 "STEMWIN"
    0x56, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x0 // @1507 "V1.0.0"
};
extern uint32_t const indicesGb[];

//array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

//Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] =
{
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}

