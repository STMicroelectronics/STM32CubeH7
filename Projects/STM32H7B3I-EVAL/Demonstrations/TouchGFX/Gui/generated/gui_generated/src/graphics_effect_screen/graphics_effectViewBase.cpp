/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/graphics_effect_screen/graphics_effectViewBase.hpp>
#include "BitmapDatabase.hpp"

graphics_effectViewBase::graphics_effectViewBase() :
    buttonCallback(this, &graphics_effectViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &graphics_effectViewBase::sliderValueChangedCallbackHandler)
{
    background.setXY(0, 0);
    background.setBitmap(touchgfx::Bitmap(BITMAP_ANIMATING_BUTTONS_BACKGROUND_ID));

    slider1.setXY(24, 261);
    slider1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_INDICATORS_SLIDER3_VERTICAL_ROUND_NOB_ID));
    slider1.setupVerticalSlider(7, 3, 0, 0, 125);
    slider1.setValueRange(32, 255);
    slider1.setValue(192);
    slider1.setNewValueCallback(sliderValueChangedCallback);

    slider2.setXY(742, 261);
    slider2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_INDICATORS_SLIDER3_VERTICAL_ROUND_NOB_ID));
    slider2.setupVerticalSlider(7, 3, 0, 0, 125);
    slider2.setValueRange(20, 90);
    slider2.setValue(80);
    slider2.setNewValueCallback(sliderValueChangedCallback);

    gotoMenuButton.setXY(21, 14);
    gotoMenuButton.setBitmaps(touchgfx::Bitmap(BITMAP_MENU_ICON_ID), touchgfx::Bitmap(BITMAP_MENU_ICON_PRESSED_ID));
    gotoMenuButton.setAction(buttonCallback);

    mcuLoad.setXY(610, 27);

    add(background);
    add(slider1);
    add(slider2);
    add(gotoMenuButton);
    add(mcuLoad);
}

void graphics_effectViewBase::setupScreen()
{
    mcuLoad.initialize();
}

void graphics_effectViewBase::slider1ValueUpdated(int value)
{

}

void graphics_effectViewBase::slider2ValueUpdated(int value)
{

}

void graphics_effectViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &gotoMenuButton)
    {
        //gotoMenuButtonPressed
        //When gotoMenuButton clicked execute C++ code
        //Execute C++ code
        presenter->gotoMenuSelected();
    }
}

void graphics_effectViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &slider1)
    {
        //Slider1ValueChanged
        //When slider1 value changed call slider1ValueUpdated on graphics_effect
        //Call slider1ValueUpdated
        slider1ValueUpdated(value);
    }
    else if (&src == &slider2)
    {
        //Slider2ValueChanged
        //When slider2 value changed call slider2ValueUpdated on graphics_effect
        //Call slider2ValueUpdated
        slider2ValueUpdated(value);
    }
}
