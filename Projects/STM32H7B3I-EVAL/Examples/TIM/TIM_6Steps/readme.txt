/**
  @page TIM_6Steps Timers Synchronization example
  
  @verbatim
  ******************************************************************************
  * @file    TIM/TIM_6Steps/readme.txt 
  * @author  MCD Application Team
  * @brief   Description of the TIM 6 Steps example.

  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2019 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  @endverbatim

@par Example Description 

This example shows how to configure the TIM1 peripheral to generate 6 Steps.
The STM32H7B3xxQ TIM1 peripheral offers the possibility to program in advance the 
configuration for the next TIM1 outputs behaviour (step) and change the configuration
of all the channels at the same time. This operation is possible when the COM 
(commutation) event is used.

At the beginning of the main program the HAL_Init() function is called to reset
all the peripherals, initialize the Flash interface and the systick.
The SystemClock_Config() function is used to configure the system clock for STM32H7B3xxQ Devices :
The CPU at 280 MHz.
The HCLK for CD Domain AXI and AHB3 peripherals, CD Domain AHB1/AHB2 peripherals and SRD Domain AHB4  peripherals at 280 MHz.
The APB clock dividers for CD  Domain APB3 peripherals, CD Domain APB1 and APB2 peripherals and SRD Domain APB4 peripherals to run at 280 MHz/2.
 
The COM event can be generated by software by setting the COM bit in the TIM1_EGR
register or by hardware (on TRC rising edge).
In this example, a software COM event is generated each 1 ms: using the SysTick 
interrupt.

The TIM1 is configured in Timing Mode, each time a COM event occurs, a new TIM1
configuration will be set in advance. Only changed states are programmed. 

The break Polarity is used at High level.

The following Table describes the TIM1 Channels states:

@verbatim
                     -----------------------------------------------
                    | Step1 | Step2 | Step3 | Step4 | Step5 | Step6 |
          ----------------------------------------------------------
         |Channel1  | 1(PWM)|   0   |   0   |   0   |   0   |1(PWM) |
          ----------------------------------------------------------
         |Channel1N |   0   |   0   |1(PWM) |1(PWM) |   0   |   0   |
          ----------------------------------------------------------
         |Channel2  |   0   |   0   |   0   |1(PWM) |1(PWM) |   0   |
          ----------------------------------------------------------
         |Channel2N |1(PWM) |1(PWM) |   0   |   0   |   0   |   0   |
          ----------------------------------------------------------
         |Channel3  |   0   |1(PWM) |1(PWM) |   0   |   0   |   0   |
          ----------------------------------------------------------
         |Channel3N |   0   |   0   |   0   |   0   |1(PWM) |1(PWM) |
          -----------------------------------------------------------
   
   
 Channel1  (PA.08)   |||||||_________________________________||||||||||||||_________________________________|||||||
 Channel1N (PA.07)   _______________||||||||||||||||_______________________________||||||||||||||||________________
                                                    
 Channel2  (PA.09)   _______________________||||||||||||||||_______________________________||||||||||||||||________
 Channel2N (PB.00)   |||||||||||||||________________________________|||||||||||||||________________________________
                                                    
 Channel3  (PA.10)   _______||||||||||||||||_______________________________||||||||||||||||________________________
 Channel3N (PB.01)   ________________________________|||||||||||||||________________________________|||||||||||||||
   
@endverbatim


@note Care must be taken when using HAL_Delay(), this function provides accurate delay (in milliseconds)
      based on variable incremented in SysTick ISR. This implies that if HAL_Delay() is called from
      a peripheral ISR process, then the SysTick interrupt must have higher priority (numerically lower)
      than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
      To change the SysTick interrupt priority you have to use HAL_NVIC_SetPriority() function.
      
@note The example need to ensure that the SysTick time base is always set to 1 millisecond
      to have correct HAL operation.

@Note If the  application is using the DTCM/ITCM memories (@0x20000000/ 0x0000000: not cacheable and only accessible
      by the Cortex M7 and the  MDMA), no need for cache maintenance when the Cortex M7 and the MDMA access these RAMs.
      If the application needs to use DMA(or other masters) based access or requires more RAM, then the user has to:
              - Use a non TCM SRAM. (example : CD AXI-SRAM @ 0x24000000)
              - Add a cache maintenance mechanism to ensure the cache coherence between CPU and other masters (DMAs, DMA2D, LTDC, MDMA).
              - The addresses and the size of cacheable buffers (shared between CPU and other masters)
                must be properly defined to be aligned to L1-CACHE line size (32 bytes).

@Note It is recommended to enable the cache and maintain its coherence.
              Please refer to the AN4838 "Managing memory protection unit (MPU) in STM32 MCUs"
              Please refer to the AN4839 "Level 1 cache on STM32F7 Series and STM32H7 Series"

@par Keywords

Timers, 6 steps, PWM, Duty Cycle, Waveform, Oscilloscope, Output, Signal, commutation, timing mode

@par Directory contents 

  - TIM/TIM_6steps/Inc/stm32h7xx_hal_conf.h    HAL configuration file
  - TIM/TIM_6steps/Inc/stm32h7xx_it.h          Interrupt handlers header file
  - TIM/TIM_6steps/Inc/main.h                  Header for main.c module  
  - TIM/TIM_6steps/Inc/stm32h7b3i_eval_conf.h  STM32H7B3I-EVAL board configuration file
  - TIM/TIM_6steps/Src/stm32h7xx_it.c          Interrupt handlers
  - TIM/TIM_6steps/Src/main.c                  Main program
  - TIM/TIM_6steps/Src/stm32h7xx_hal_msp.c     HAL MSP file
  - TIM/TIM_6steps/Src/system_stm32h7xx.c      STM32H7xx system source file

@par Hardware and Software environment

  - This example runs on STM32H7B3xxQ devices.
    
  - This example has been tested with STM32H7B3I-EVAL board and can be
    easily tailored to any other supported device and development board.      

  - STM32H7B3I-EVAL Set-up
   Connect the following pins to an oscilloscope to monitor the different waveforms:
      - TIM1_CH1  pin (PA.08)  
      - TIM1_CH1N pin (PA.07)  
      - TIM1_CH2  pin (PA.09)  
      - TIM1_CH2N pin (PB.00)  
      - TIM1_CH3  pin (PA.10)  
      - TIM1_CH3N pin (PB.01)

    - Connect the TIM1 break pin TIM1_BKIN pin (PA.06) to the GND. To generate a 
      break event, switch this pin level from 0V to 3.3V.  


@par How to use it ? 

In order to make the program work, you must do the following :
 - Open your preferred toolchain
 - Rebuild all files: Project->Rebuild all
 - Load project image: Project->Download and Debug
 - Run program: Debug->Go(F5) 


 */
