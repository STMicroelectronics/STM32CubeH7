#############################################################################
# By installing, copying or using this software you, on behalf of
# yourself or the entity you represent, agree to be bound by the terms
# of the ST-TouchGFX License, which you may download, review, and print
# from www.st.com/st-touchgfx_license.
#
# In addition to any other applicable terms, you may not use the
# software for production purposes, except in connection with the list
# of Dedicated Parts provided here: www.st.com/st-touchgfx_license.
#
# THIS SOFTWARE IS PROVIDED “AS IS” WITHOUT ANY WARRANTY, EXPRESS OR
# IMPLIED.
#
# This file is part of the ST-TouchGFX 4.9.4 distribution.
#
# Copyright (C) 2018 Draupner Graphics A/S <http://www.touchgfx.com>
#############################################################################

# Get name of this Makefile
makefile_name := $(lastword $(MAKEFILE_LIST))

# Get path of this Makefile
makefile_path := $(dir $(abspath $(makefile_name)))

# Get path where the Application is
application_path := $(abspath $(makefile_path)/..)

# Change makefile_name to a relative path
makefile_name := $(patsubst $(application_path)/%,%,$(abspath $(makefile_name)))

# Relative path to the base Cube firmware folder
firmware_path := $(application_path)../../../../../..

# Get identification of this system
ifeq ($(OS),Windows_NT)
UNAME := MINGW32_NT-6.2
else
UNAME := $(shell uname -s)
endif

board_name := STM32H747I_EVAL
platform := cortex_m7

.PHONY: all clean assets flash intflash

ifneq ($(words $(makefile_path))$(words $(MAKEFILE_LIST)),11)
$(error Spaces not allowed in path)
else

all: $(filter clean,$(MAKECMDGOALS))
all clean assets:
	@cd $(application_path) && $(MAKE) -r -f $(makefile_name) -s $(MFLAGS) _$@_

flash intflash: all
	@cd $(application_path) && $(MAKE) -r -f $(makefile_name) -s $(MFLAGS) _$@_

# Directories containing application-specific source and header files.
# Additional components can be added to this list. make will look for
# source files recursively in comp_name/src and setup an include directive
# for comp_name/include.
components := gui generated/gui_generated

# Location of folder containing bmp/png files.
asset_images_input  := assets/images

# Location of folder to search for ttf font files
asset_fonts_input  := assets/fonts

# Location of folder where the texts.xlsx is placed
asset_texts_input  := assets/texts

build_root_path := build
object_output_path := $(build_root_path)/$(board_name)
binary_output_path := $(build_root_path)/bin

# Location of output folders where autogenerated code from assets is placed
asset_root_path := generated
asset_images_output := $(asset_root_path)/images
asset_fonts_output := $(asset_root_path)/fonts
asset_texts_output := $(asset_root_path)/texts

#include application specific configuration
include $(application_path)/config/gcc/app.mk

os_source_files := $(firmware_path)/Middlewares/Third_Party/FreeRTOS/Source/croutine.c \
                   $(firmware_path)/Middlewares/Third_Party/FreeRTOS/Source/list.c \
                   $(firmware_path)/Middlewares/Third_Party/FreeRTOS/Source/queue.c \
                   $(firmware_path)/Middlewares/Third_Party/FreeRTOS/Source/tasks.c \
                   $(firmware_path)/Middlewares/Third_Party/FreeRTOS/Source/timers.c \
                   $(firmware_path)/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_2.c \
                   $(firmware_path)/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c \
				   $(firmware_path)/Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c

os_include_paths := $(firmware_path)/Middlewares/Third_Party/FreeRTOS/Source/include \
					$(firmware_path)/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1 \
					$(firmware_path)/Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS

os_wrapper := $(touchgfx_path)/os/OSWrappers_cmsis.cpp

### END OF USER SECTION. THE FOLLOWING SHOULD NOT BE MODIFIED ###

ifeq ($(UNAME), Linux)
imageconvert_executable := $(touchgfx_path)/framework/tools/imageconvert/build/linux/imageconvert.out
fontconvert_executable := $(touchgfx_path)/framework/tools/fontconvert/build/linux/fontconvert.out
else
imageconvert_executable := $(touchgfx_path)/framework/tools/imageconvert/build/win/imageconvert.out
fontconvert_executable := $(touchgfx_path)/framework/tools/fontconvert/build/win/fontconvert.out
st_link_executable := "$(PROGRAMFILES)\\STMicroelectronics\\STM32 ST-LINK Utility\\ST-LINK Utility\\ST-LINK_CLI.exe"
st_link_external_loader := "$(PROGRAMFILES)\\STMicroelectronics\\STM32 ST-LINK Utility\\ST-LINK Utility\\ExternalLoader\\MX25L512G_STM32F769I-DISCO.stldr"
endif

target_executable := target.elf
target_hex := target.hex

assembler := arm-none-eabi-gcc
c_compiler := arm-none-eabi-gcc
cpp_compiler := arm-none-eabi-g++
linker := arm-none-eabi-g++
objcopy := arm-none-eabi-objcopy
archiver := arm-none-eabi-ar
strip := arm-none-eabi-strip

-include $(touchgfx_path)/build_conf/core/cortex_m7/gcc/options-libtouchgfx.mk

assembler_options += -g -nostartfiles
c_compiler_options += -Os -g -nostartfiles -std=c99 -fno-strict-aliasing -fdata-sections -ffunction-sections
cpp_compiler_options += -Os -g -nostartfiles -fno-rtti -fno-strict-aliasing -fdata-sections -ffunction-sections
linker_options += -Os -g -Wl,-static -nostartfiles -fno-rtti -fno-strict-aliasing -Wl,--gc-sections

#include everything + specific vendor folders
framework_includes := $(touchgfx_path)/framework/include

#this needs to change when assset include folder changes.
all_components_except_images := $(components) \
				$(asset_fonts_output) \
				$(asset_texts_output)
all_components := $(all_components_except_images) \
		  $(asset_images_output)

#keep framework include and source out of this
include_paths := $(library_includes) $(foreach comp, $(all_components), $(comp)/include) $(framework_includes)
source_paths = $(foreach comp, $(all_components_except_images), $(comp)/src)

# Finds files that matches the specified pattern. The directory list
# is searched recursively. It is safe to invoke this function with an
# empty list of directories.
#
# Param $(1): List of directories to search
# Param $(2): The file pattern to search for
define find
	$(foreach dir,$(1),$(foreach d,$(wildcard $(dir)/*),\
		$(call find,$(d),$(2))) $(wildcard $(dir)/$(strip $(2))))
endef
unexport find

fontconvert_ttf_lower_files := $(call find, $(asset_fonts_input), *.ttf)
fontconvert_ttf_upper_files := $(call find, $(asset_fonts_input), *.TTF)
fontconvert_otf_lower_files := $(call find, $(asset_fonts_input), *.otf)
fontconvert_otf_upper_files := $(call find, $(asset_fonts_input), *.OTF)
fontconvert_bdf_lower_files := $(call find, $(asset_fonts_input), *.bdf)
fontconvert_bdf_upper_files := $(call find, $(asset_fonts_input), *.BDF)
fontconvert_font_files := $(fontconvert_ttf_lower_files) \
			  $(fontconvert_ttf_upper_files) \
			  $(fontconvert_otf_lower_files) \
			  $(fontconvert_otf_upper_files) \
			  $(fontconvert_bdf_lower_files) \
			  $(fontconvert_bdf_upper_files)

imageconvert_bmp_lower_files := $(call find, $(asset_images_input), *.bmp)
imageconvert_bmp_upper_files := $(call find, $(asset_images_input), *.BMP)
imageconvert_png_lower_files := $(call find, $(asset_images_input), *.png)
imageconvert_png_upper_files := $(call find, $(asset_images_input), *.PNG)
imageconvert_image_files := $(imageconvert_bmp_lower_files) \
			    $(imageconvert_bmp_upper_files) \
			    $(imageconvert_png_lower_files) \
			    $(imageconvert_png_upper_files)
imageconvert_cpp_files := $(imageconvert_bmp_lower_files:$(asset_images_input)/%.bmp=$(asset_images_output)/src/%.cpp) \
			  $(imageconvert_bmp_upper_files:$(asset_images_input)/%.BMP=$(asset_images_output)/src/%.cpp) \
			  $(imageconvert_png_lower_files:$(asset_images_input)/%.png=$(asset_images_output)/src/%.cpp) \
			  $(imageconvert_png_upper_files:$(asset_images_input)/%.PNG=$(asset_images_output)/src/%.cpp)

source_files := $(call find, $(source_paths),*.cpp) $(imageconvert_cpp_files) $(asset_images_output)/src/BitmapDatabase.cpp

gcc_source_files := $(touchgfx_path)/framework/config/gcc/stdio.c \
                    $(touchgfx_path)/framework/config/gcc/stdlib.c \
                    $(touchgfx_path)/framework/config/gcc/string.c

c_compiler_options += -DST -DSTM32H747xx -DUSE_IOEXPANDER -DUSE_HAL_DRIVER -DUSE_STM32H747I_EVAL -DCORE_CM7
cpp_compiler_options += -DST -DSTM32H747xx -DUSE_IOEXPANDER -DUSE_HAL_DRIVER -DUSE_STM32H747I_EVAL -DCORE_CM7

board_include_paths := \
	$(firmware_path)/Drivers/CMSIS/Include \
	$(firmware_path)/Drivers/CMSIS/Device/ST/STM32H7xx/Include \
	$(firmware_path)/Drivers/BSP/STM32H747I_EVAL \
	$(firmware_path)/Drivers/STM32H7xx_HAL_Driver/Inc \
	../Core/Inc \
	../Config \
	.. \
	target

include_paths += $(board_include_paths) $(os_include_paths) \
				 $(firmware_path)/Middlewares/Third_Party/FatFs/src \
				 $(firmware_path)/Middlewares/Third_Party/FatFs/src/drivers \
				 $(firmware_path)/Utilities/JPEG \
				 $(firmware_path)/Middlewares/Third_Party/LibJPEG/include \
				 $(firmware_path)/Middlewares/ST/STM32_Audio/Addons/PDM/Inc \
				 $(firmware_path)/Middlewares/ST/STM32_USB_Host_Library/Core/Inc \
				 $(firmware_path)/Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc

board_c_files := $(wildcard $(firmware_path)/Drivers/BSP/STM32H747I_EVAL/*.c)
board_c_files := $(filter-out %lcd.c, $(board_c_files))
board_c_files += $(wildcard $(firmware_path)/Drivers/STM32H7xx_HAL_Driver/Src/*.c)
board_c_files := $(filter-out %template.c, $(board_c_files))

board_c_files += $(firmware_path)/Drivers/BSP/Components/ft6x06/ft6x06.c
board_c_files += $(firmware_path)/Drivers/BSP/Components/otm8009a/otm8009a.c
board_c_files += $(firmware_path)/Drivers/BSP/Components/wm8994/wm8994.c

c_source_files := $(call find, $(source_paths),*.c) $(os_source_files) gcc/isr.c $(board_c_files) $(call find, ../Core/Src,*.c) $(call find, target,*.c)
source_files += $(os_wrapper) gcc/gccstubs.cpp
source_files += ../Core/Src/main.cpp $(call find, target,*.cpp)

libfatfs_sources := $(firmware_path)/Middlewares/Third_Party/FatFs/src/ff.c \
					$(firmware_path)/Middlewares/Third_Party/FatFs/src/option/syscall.c \
					$(firmware_path)/Middlewares/Third_Party/FatFs/src/option/unicode.c

c_source_files += $(libfatfs_sources)

# LibJPEG source files
c_compiler_options_local += -Wno-format-nonliteral -Wno-error=shift-negative-value
libjpeg_sources := \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jcapistd.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jdmerge.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jcsample.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jmemmgr.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jdatadst.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jdatasrc.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jdmaster.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jidctflt.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jcprepct.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jdapimin.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jcmainct.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jdpostct.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jidctint.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jdcoefct.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jcapimin.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jdinput.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jcinit.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jutils.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jccoefct.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jddctmgr.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jcdctmgr.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jfdctflt.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jquant2.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jdmarker.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jfdctfst.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jcmaster.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jdcolor.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jcparam.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jdarith.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jdapistd.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jerror.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jdtrans.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jmemnobs.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jdmainct.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jcomapi.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jdhuff.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jchuff.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jdsample.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jctrans.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jquant1.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jaricom.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jcmarker.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jccolor.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jfdctint.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jidctfst.c \
					$(firmware_path)/Middlewares/Third_Party/LibJPEG/source/jcarith.c

c_source_files += $(libjpeg_sources)

# JPEG Utility source files
jpegutils_sources := jpeg_utils.c
c_source_files += $(jpegutils_sources)

libusbhost_sources := $(wildcard $(firmware_path)/Middlewares/ST/STM32_USB_Host_Library/Core/Src/*.c)
libusbhost_sources := $(filter-out %_template.c, $(libusbhost_sources))
libusbhost_sources += $(wildcard $(firmware_path)/Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Src/*.c)

c_source_files += $(libusbhost_sources)

object_files := $(source_files:$(touchgfx_path)/%.cpp=$(object_output_path)/touchgfx/%.o) $(c_source_files:$(touchgfx_path)/%.c=$(object_output_path)/touchgfx/%.o)
object_files := $(object_files:$(firmware_path)/Drivers/%.c=$(object_output_path)/%.o)
object_files := $(object_files:$(firmware_path)/Middlewares/%.c=$(object_output_path)/%.o)
object_files := $(object_files:%.cpp=$(object_output_path)/%.o)
object_files := $(object_files:%.c=$(object_output_path)/%.o)
dependency_files := $(object_files:%.o=%.d)

textconvert_script_path := $(touchgfx_path)/framework/tools/textconvert
textconvert_executable := $(call find, $(textconvert_script_path), *.rb)

text_database := $(asset_texts_input)/texts.xlsx

libraries := touchgfx
library_include_paths := $(touchgfx_path)/lib/core/$(platform)/gcc

VPATH := $(firmware_path)/Drivers
VPATH += $(firmware_path)/Middlewares
VPATH += $(firmware_path)/Utilities/JPEG/

.PHONY: _all_ _clean_ _assets_ _flash_ _intflash_ generate_assets build_executable

# Force linking each time
.PHONY: $(binary_output_path)/$(target_executable)

_all_: generate_assets

ifeq ($(shell find $(application_path) -wholename "$(application_path)/$(binary_output_path)/extflash.bin" -size +0c | wc -l | xargs echo),1)
_flash_: _extflash_
else
_flash_: _intflash_
endif

_extflash_:
	@$(st_link_executable) -c -P $(binary_output_path)/target.hex 0x90000000 -Rst -EL $(st_link_external_loader)

_intflash_:
	@$(st_link_executable) -c -P $(binary_output_path)/intflash.hex 0x08000000 -Rst

generate_assets: _assets_
	@$(MAKE) -f $(makefile_name) -r -s $(MFLAGS) build_executable
build_executable: $(binary_output_path)/$(target_executable)

# write object_files to a temp file used by the linker. This is necessary to avoid exceeding 32Kb limit in a mingw command line for large touchgfx projects
ifeq ($(MAKECMDGOALS),build_executable)
$(shell mkdir -p $(object_output_path))
ifeq ($(MAKE_VERSION),4.1)
$(file >$(build_root_path)/objects.tmp) $(foreach F,$(object_files),$(file >>$(build_root_path)/objects.tmp,$F))
else
$(shell echo "$(object_files)">$(build_root_path)/objects.tmp)
endif
endif

$(binary_output_path)/$(target_executable): $(object_files)
	@echo Linking $(@)
	@mkdir -p $(@D)
	@$(linker) \
		$(linker_options) -T gcc/application.ld -Wl,-Map=$(@D)/application.map $(linker_options_local) \
		$(patsubst %,-L%,$(library_include_paths)) \
		@$(build_root_path)/objects.tmp -o $@ \
		-Wl,--start-group $(patsubst %,-l%,$(libraries)) -Wl,--end-group
	@rm -f $(build_root_path)/objects.tmp
	@echo "Producing additional output formats..."
	@echo "  target.hex   - Combined internal+external hex"
	@$(objcopy) -O ihex $@ $(@D)/target.hex
	@echo "  intflash.elf - Internal flash, elf debug"
	@$(objcopy) --remove-section=ExtFlashSection $@ $(@D)/intflash.elf 2>/dev/null
	@echo "  intflash.hex - Internal flash, hex"
	@$(objcopy) -O ihex --remove-section=ExtFlashSection $@ $(@D)/intflash.hex
	@echo "  extflash.bin - External flash, binary"
	@$(objcopy) -O binary --only-section=ExtFlashSection $@ $(@D)/extflash.bin

$(object_output_path)/touchgfx/%.o: $(touchgfx_path)/%.cpp $(application_path)/config/gcc/app.mk
	@echo Compiling $<
	@mkdir -p $(@D)
	@$(cpp_compiler) \
		-MMD -MP $(cpp_compiler_options) $(cpp_compiler_options_local) $(user_cflags) \
		$(patsubst %,-I%,$(include_paths)) \
		-c $< -o $@

$(object_output_path)/%.o: %.cpp $(application_path)/config/gcc/app.mk
	@echo Compiling $<
	@mkdir -p $(@D)
	@$(cpp_compiler) \
		-MMD -MP $(cpp_compiler_options) $(cpp_compiler_options_local) $(user_cflags) \
		$(patsubst %,-I%,$(include_paths)) \
		-c $< -o $@

$(object_output_path)/%.o: %.c $(application_path)/config/gcc/app.mk
	@echo Compiling $<
	@mkdir -p $(@D)
	@$(c_compiler) \
		-MMD -MP $(c_compiler_options) $(c_compiler_options_local) $(user_cflags) \
		$(patsubst %,-I%,$(include_paths)) \
		-c $< -o $@

ifeq ($(MAKECMDGOALS),build_executable)
$(firstword $(dependency_files)): $(application_path)/config/gcc/app.mk
	@rm -rf $(object_output_path)
-include $(dependency_files)
endif

_assets_: BitmapDatabase $(asset_texts_output)/include/texts/TextKeysAndLanguages.hpp

alpha_dither ?= no
dither_algorith ?= 2
remap_identical_texts ?= yes

.PHONY: BitmapDatabase
BitmapDatabase:
	@echo Converting images
	@$(imageconvert_executable) -dither $(dither_algorithm) -alpha_dither $(alpha_dither) -opaque_image_format $(opaque_image_format) -non_opaque_image_format $(non_opaque_image_format) $(screen_orientation) -r $(asset_images_input) -w $(asset_images_output)

$(asset_texts_output)/include/texts/TextKeysAndLanguages.hpp: $(text_database) $(application_path)/config/gcc/app.mk $(textconvert_executable) $(fontconvert_executable) $(fontconvert_font_files)
	@rm -f $(asset_fonts_output)/src/*
	@rm -f $(asset_fonts_output)/include/fonts/*
	@rm -f $(asset_fonts_output)/UnicodeList*.txt
	@rm -f $(asset_fonts_output)/CharSizes*.csv
	@mkdir -p $(asset_texts_output)/include/texts
	@ruby $(textconvert_script_path)/main.rb $(text_database) $(fontconvert_executable) $(asset_fonts_output) $(asset_texts_output) $(asset_fonts_input) . $(remap_identical_texts) $(text_data_format)

_clean_:
	@echo Cleaning
	@rm -rf $(build_root_path)
	@rm -rf $(asset_root_path)

endif
