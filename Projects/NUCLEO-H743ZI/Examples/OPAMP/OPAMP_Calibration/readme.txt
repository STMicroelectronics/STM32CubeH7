/**
  @page OPAMP_Calibration example
  @verbatim
  ******************** (C) COPYRIGHT 2017 STMicroelectronics *******************
  * @file    OPAMP/OPAMP_CALIBRATION/readme.txt 
  * @author  MCD Application Team
  * @brief   Description of the OPAMP calibration example.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2017 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  @endverbatim

@par Example Description 

This example shows how to calibrate the OPAMP.

At the beginning of the main program the HAL_Init() function is called to reset 
all the peripherals, initialize the Flash interface and the systick.
The SystemClock_Config() function is used to configure the system clock for STM32H743xx Devices :
- The CPU at 400MHz 
- The HCLK for D1 Domain AXI and AHB3 peripherals , D2 Domain AHB1/AHB2 peripherals and D3 Domain AHB4  peripherals at 200MHz.
- The APB clock dividers for D1 Domain APB3 peripherals, D2 Domain APB1 and APB2 peripherals and D3 Domain APB4 peripherals to  run at 100MHz

On OPAMP2, this example shows how to 
- Get factory calibration (trimming) settings.
- Enable/disable OPAMP
- Calibrate OPAMP peripheral before and after use of OPAMP.
  Hence changes can be monitored (versus factory settings or in case of 
  temperature impact for instance).

- Connect an oscilloscope to DAC_CHANNEL_2 output (pin PA.05) to display the sine wave signal
  generated by the DAC. 
- Connect an oscilloscope to OPAMP2 output (pin PE.07) 
  -> to display the OPAMP buffered sine wave signal.
  -> Monitor enabling/disabling of OPAMP.
- OPAMP2 non-inverting input is internally connected to DAC_CHANNEL_2 output (pin PA.05),
  therefore no external connection is needed.
- Push the User Push button (connected to PC.13 pin) to switch from one step to the 
next one.
- Key push button steps are:
  -> 1st Push: 
     + Factory trimming retrieved 
     + User trimming set according to self calibration (1st run)
     + Factory trimming and user trimming are compared
       - If The LED1 blinks rapidly: Calibrated trimming are different from Factory Trimming
       - If The LED1 blinks slowly : Calibrated trimming same as Factory Trimming 
  -> 2nd Push: 
     + OPAMP start: OPAMP2_output signal same as DAC_CHANNEL_2 output.  
     + Use of previously calibrated user Trimming values
  -> 3rd Push: 
     + change OPAMP setting on the fly.
       Dummy change, without application purpose in this example: change non-inverting input source
       (user can apply voltage on PE9, OPAMP2_output signal same as PE9).
  -> 4th Push: 
     + OPAMP stopped    
  -> 5th Push: 
     + Self calibration (2nd run)
     + results compare to 1st run.
       - If The LED1 blinks rapidly: New calibrated trimming are different from ones calibrated before run
       - If The LED1 blinks slowly : New calibrated trimming are same as ones calibrated before run 
  -> 6th Push: end of test

LED3 is ON and example is stopped(using infinite loop) when there is an error.

@Note If the  application is using the DTCM/ITCM memories (@0x20000000/ 0x0000000: not cacheable and only accessible
      by the Cortex M7 and the  MDMA), no need for cache maintenance when the Cortex M7 and the MDMA access these RAMs.
      If the application needs to use DMA(or other masters) based access or requires more RAM, then  the user has to:
              - Use a non TCM SRAM. (example : D1 AXI-SRAM @ 0x24000000)
              - Add a cache maintenance mechanism to ensure the cache coherence between CPU and other masters(DMAs,DMA2D,LTDC,MDMA).
              - The addresses and the size of cacheable buffers (shared between CPU and other masters)
                must be	properly defined to be aligned to L1-CACHE line size (32 bytes). 
 
@Note It is recommended to enable the cache and maintain its coherence.
      Depending on the use case it is also possible to configure the cache attributes using the MPU.
      Please refer to the AN4838 "Managing memory protection unit (MPU) in STM32 MCUs"
      Please refer to the AN4839 "Level 1 cache on STM32F7 Series"

@par Keywords

Analog, OPAMP, follower, calibration, Timer, TIM, DAC, Signals generation, Waveform, Amplitude

@par Directory contents 

  - OPAMP/OPAMP_CALIBRATION/Inc/stm32h7xx_hal_conf.h    HAL configuration file
  - OPAMP/OPAMP_CALIBRATION/Inc/stm32h7xx_it.h          DMA interrupt handlers header file
  - OPAMP/OPAMP_CALIBRATION/Inc/main.h                        Header for main.c module  
  - OPAMP/OPAMP_CALIBRATION/Src/stm32h7xx_it.c          DMA interrupt handlers
  - OPAMP/OPAMP_CALIBRATION/Src/main.c                        Main program
  - OPAMP/OPAMP_CALIBRATION/Src/stm32h7xx_hal_msp.c     HAL MSP file
  - OPAMP/OPAMP_CALIBRATION/Src/system_stm32h7xx.c      STM32H7xx system source file

@par Hardware and Software environment  
  
  - This example runs on STM32H743xx devices.
    
  - This example has been tested with NUCLEO-H743ZI board and can be
    easily tailored to any other supported device and development board.

  - NUCLEO-H743ZI Set-up
    - Connect an oscilloscope to pin PA.05 (pin 10 in CN7 connector) to display DAC_CHANNEL_2 output waveform.
    - Connect an oscilloscope to pin PE.07 (pin 20 in CN10 connector)to display OPAMP2 output waveform.

@par How to use it ? 

In order to make the program work, you must do the following :
 - Open your preferred toolchain 
 - Rebuild all files and load your image into target memory
 - Run the example
  

 */

